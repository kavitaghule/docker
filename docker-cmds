
-p // expose port manually
-P // expose default port randomly 

dangling images: A dangling image is simply an unused image that's got no name and tag. You can easily spot dangling
images when you run the docker images command because they show up as <none> <none> 509bc96b727d 2 months ago 55.3MB
docker images                        //list no images
docker images ls                     //list no images
docker rmi {imagename}               // remove one or more images
docker ps                            //list all running container
docker ps -a                         //list all running and stoped container
docker contaneir ls                  //list all running container
docker contaneir ls -a               //list all running and stoped container
docker container run ubuntu cat /etc/os-release      // cat /etc/os-release  cmd run inside contaner and ther container get exited
docker container run ubuntu sleep 30                 
docker container run -d ubuntu sleep 30          //in detach mode
docker run -it ubuntu /bin/bash                 //goes inside container -i=--interactive -t=--tty 
ctrl+pq                                              // after goes inside container ctrl+pq press u can exit and container still run
docker run -itd ubuntu /bin/bash      //bin/bash run cmd in contaner so we can use : like yum install
docker container rm {contanerid} (1 2 3 ) no of contaner  //  docker container rm {c6883ehjjdd} // docker container rm c6
docker rm {contanerid}
docker container ls -aq              //list all contaner id
docker container rm ${docker container ls -aq }                //rm all contaners
docker container start  {contanerid}                       ////start all contaners
docker container restart  {contanerid}                      //restart all contaners
docker container stop  {contanerid}                       //stop container
docker container inspect {contanerid} //  docker container inspect {contanerid} | less                  //can debug by seeing logs
docker container logs {contanerid} 
docker container top {contanerid}       // show running process inside container
docker container stats        //   show memory& cpu utiliztion inside container
docker container run -d --name test -p 8080:80 {image name}       // port mapping/ access on browser by {hostip:port = 172.09.37.28:8080
##netstat -tnlp              // shows all oprn ports
docker container rename {contanerid} {newname} //docker container rename {oldname} {newname}     // rename container
docker container attch {contanerid}   // attch mode active aste only
docker container kill {contanerid}   // kill ronning container foecefully 
docker container wait {contanerid}  //wait for stop container
docker container pause {contanerid}
docker container unpause {contanerid}
docker container prune / docker container prune -f     // kill container 
docker container port {contanerid}/name            // show only port of container
docker container create {contanerid}              //only create container
docker container diff {contanerid}                 // shows changes made in file system
#watch 'docker container diff {contanerid}          // watch the running cmd
docker container cp test {contanerid}:/tmp/
docker container export {contanerid} >my_centos_git_java_tree.tar  // export comtainer in tarfile
docker container export {contanerid} -o my_centos_git_java_tree.tar 
docker image save {imageid} > abc.tar    //same as export cmd
docker image load {imageid} < abc.tar
docker export= does not compress volume attch to image  vs docker save = if we didnot provide image tag then docker save will compress all images in tarfile
docker container import  my_centos_git_java_tree.tar my_centos_t_g   //import as image so we havee run container frm image and all installation with present in that container
docker login
docker image tag {image-id} repouserid/{image-name:tag} 
docker commit {contanerid} / docker commit --author "kavita"-m "1st image" {contanerid} name-image
docker push repouserid/{image-name:tag} / docker push kavitaghule/{nginx:v1/latest/20.02}
docker pull repouserid/{image-name:tag} / docker pull kavitaghule/{nginx:v1/latest/20.02}
docker images ls --format '{{.ID}}, {{.Repository}}, {{.Tag}}'    //output shows id, repo, tag
docker image history nginx        //shows image history
docker image inspect {imageid} | less
docker image prune   // rm unused images


#### dockerfile ####
name must be dokcerfile/Dockerfile 
if other then must have to specify in buld 
that layers may be in capital/ small but use in capital is best practice
FROM ubuntu:16.04
LABEL name-"kavita" && email="kavitagmail.com"
ENV NAME kavita && PASS 123
WORKDIR /tmp
RUN pwd>/tmp/1.txt                                         // all shell cmds
USER $name                                                 // after this all cmd run as user kavita
ADD   http://tomcat.tar   //mnt/test  /mnt/project         
COPY   /mnt/test /mnt/project                       //copy file from host:container
EXPOSE   22 80 8080
CMD   ["/usr/sbin/sshd","-D"]       //sshd start  //should have only one cmd in dockerfile   //execute cmd when container start   
                                     //ssh kavita@containerip 
ENTRYPOINT   ["tree"]   ["--veeion"]    ["/tmp/test.sh"]                   //execute cmd when container start 

docker build -t myubuntu:v1 .     // . means dockerfile is in present working dir            // biuld image from dockerfile
docker build -t myubuntu:v1         /opt/tomcat/dockerfile 
docker volume create my-vol          //create volume on host
docker volume ls                          // list volume
1} volume mount:docker run -d --name mysql1 -v abc:/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql   create volume in host and  container
 docker volume inspect abc       ///var/lib/docker/volumes/abc/_data                  //show log 
2} docke bind mount                      //a file or directory on the host machine is mounted into a container. to keep data centralize shared lib
 docker run -itd --name centos -v /opt/abc/wars:/mnt/       // have to provide full path otherwise it create volume mount                    
docker volume rm my-vol                  //rm volume
docker volume prune                      // rm unused volumes
### bridge network
docker network ls                         // bydefault bridge network is activate
docker network create -d bridge test //docker network create --driver bridge test     // create network
docker run -itd --name centos1 --network test centos 
when we create network then veth0 create on host(eth0) for each network
if container are in same network then they can communicate easly {not req port mapping}   {nginx}curl containerip
if container are in diff network {test} & {default} then communication we have to communicate with hostip:container_port 
curl 192.38.73.28:37288 ///best practice use seperate network for each application
can curl hostname of contaner also bydefault it is enabled// ping 289935b91402  only for same network
## host
docker run -itd --name test4 --network=host nginx    // port mapping not needed //only one host can create
## null/none 
docker run -itd --name tes4 --network=none nginx      // if not req any network
docker network connect test {containerid}   //connect to another network
docker network disconnect test {containerid}     // disconnect from another network
docker network rm host    /rm network
docker network prune  // dlt unused network
custom local repository for image push {insecure}
docker run -d -p 5000:5000 --restart always --name registry registry:2  //http://locathost:5000/v2/_catalog access url
docker image tag {image-id} repouserid/{image-name:tag} //docker image tag ff1857193a0b 3.109.155.21:5000/regitry:v1 
 docker image push 3.109.155.21:5000/regitry
 docker image pull 3.109.155.21:5000/regitry // without internet    //cant push/ pull from repo bec docker not allow insecure repo
vi a.sh > { 

}

## docker compose //vi docker-copmpose.yml
version: '3'                    //
services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
  db:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: mysecretpassword

//////
docker-compose up -d // docker-compose -f up -d //custom name
docker-compose down










